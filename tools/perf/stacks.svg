<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="374.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="357" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="357" > </text>
<g id="frames">
<g >
<title>jos::kprint::{impl#1}::write_str (3 samples, 1.38%)</title><rect x="58.9" y="165" width="16.4" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="61.94" y="175.5" ></text>
</g>
<g >
<title>compiler_builtins::mem::memset::memset (3 samples, 1.38%)</title><rect x="1173.7" y="213" width="16.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1176.69" y="223.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;jos::process::Process, (2 samples, 0.92%)</title><rect x="26.3" y="229" width="10.9" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="29.31" y="239.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;jos::process::Process, (1 samples, 0.46%)</title><rect x="37.2" y="229" width="5.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="40.19" y="239.5" ></text>
</g>
<g >
<title>compiler_builtins::mem::memcpy::memcpy (3 samples, 1.38%)</title><rect x="1157.4" y="213" width="16.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1160.37" y="223.5" ></text>
</g>
<g >
<title>jos::serial::write_serial (1 samples, 0.46%)</title><rect x="69.8" y="117" width="5.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="72.82" y="127.5" ></text>
</g>
<g >
<title>jos::serial::write_serial (1 samples, 0.46%)</title><rect x="956.2" y="165" width="5.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="959.18" y="175.5" ></text>
</g>
<g >
<title>jos::process::Process::new (9 samples, 4.15%)</title><rect x="1141.1" y="245" width="48.9" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1144.06" y="255.5" >jos:..</text>
</g>
<g >
<title>core::option::{impl#39}::branch&lt;&amp;u8&gt; (1 samples, 0.46%)</title><rect x="80.7" y="149" width="5.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="83.69" y="159.5" ></text>
</g>
<g >
<title>core::num::{impl#9}::unchecked_add::precondition_check (3 samples, 1.38%)</title><rect x="526.6" y="85" width="16.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="529.59" y="95.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null&lt;alloc::alloc::Global, (1 samples, 0.46%)</title><rect x="37.2" y="181" width="5.4" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="40.19" y="191.5" ></text>
</g>
<g >
<title>core::fmt::num::GenericRadix::fmt_int&lt;core::fmt::num::LowerHex, (3 samples, 1.38%)</title><rect x="58.9" y="181" width="16.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="61.94" y="191.5" ></text>
</g>
<g >
<title>core::ptr::write_volatile::precondition_check (2 samples, 0.92%)</title><rect x="86.1" y="149" width="10.9" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="89.13" y="159.5" ></text>
</g>
<g >
<title>core::str::iter::{impl#0}::next (2 samples, 0.92%)</title><rect x="75.3" y="181" width="10.8" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="78.25" y="191.5" ></text>
</g>
<g >
<title>compiler_builtins::mem::memcpy (3 samples, 1.38%)</title><rect x="1141.1" y="213" width="16.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1144.06" y="223.5" ></text>
</g>
<g >
<title>core::ptr::write_volatile::precondition_check (2 samples, 0.92%)</title><rect x="58.9" y="101" width="10.9" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="61.94" y="111.5" ></text>
</g>
<g >
<title>compiler_builtins::mem::memcpy::memcpy (3 samples, 1.38%)</title><rect x="42.6" y="213" width="16.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="45.63" y="223.5" ></text>
</g>
<g >
<title>core::ptr::read_volatile::precondition_check (25 samples, 11.52%)</title><rect x="591.8" y="133" width="136.0" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="594.84" y="143.5" >core::ptr::read_v..</text>
</g>
<g >
<title>compiler_builtins::mem::memset (3 samples, 1.38%)</title><rect x="1173.7" y="197" width="16.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1176.69" y="207.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;jos::process::Process, (1 samples, 0.46%)</title><rect x="37.2" y="213" width="5.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="40.19" y="223.5" ></text>
</g>
<g >
<title>?? (217 samples, 100.00%)</title><rect x="10.0" y="309" width="1180.0" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >??</text>
</g>
<g >
<title>core::num::{impl#11}::count_ones (1 samples, 0.46%)</title><rect x="91.6" y="69" width="5.4" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="94.57" y="79.5" ></text>
</g>
<g >
<title>jos::userland::Userland::switch_to_userland (214 samples, 98.62%)</title><rect x="26.3" y="261" width="1163.7" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="29.31" y="271.5" >jos::userland::Userland::switch_to_userland</text>
</g>
<g >
<title>compiler_builtins::mem::memcpy (3 samples, 1.38%)</title><rect x="1157.4" y="197" width="16.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1160.37" y="207.5" ></text>
</g>
<g >
<title>core::iter::range::{impl#6}::next&lt;u64&gt; (26 samples, 11.98%)</title><rect x="401.5" y="149" width="141.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="404.52" y="159.5" >core::iter::range..</text>
</g>
<g >
<title>core::num::{impl#9}::overflowing_add (1 samples, 0.46%)</title><rect x="537.5" y="69" width="5.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="540.47" y="79.5" ></text>
</g>
<g >
<title>jos::kernel_main (217 samples, 100.00%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >jos::kernel_main</text>
</g>
<g >
<title>core::num::{impl#9}::unchecked_add (6 samples, 2.76%)</title><rect x="510.3" y="101" width="32.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="513.28" y="111.5" >co..</text>
</g>
<g >
<title>compiler_builtins::mem::impls::copy_forward (3 samples, 1.38%)</title><rect x="1157.4" y="181" width="16.3" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="1160.37" y="191.5" ></text>
</g>
<g >
<title>core::num::{impl#11}::is_power_of_two (12 samples, 5.53%)</title><rect x="651.7" y="69" width="65.2" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="654.66" y="79.5" >core::n..</text>
</g>
<g >
<title>jos::heap::_::__rust_alloc (2 samples, 0.92%)</title><rect x="26.3" y="117" width="10.9" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="29.31" y="127.5" ></text>
</g>
<g >
<title>core::fmt::num::{impl#64}::fmt (3 samples, 1.38%)</title><rect x="58.9" y="197" width="16.4" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="61.94" y="207.5" ></text>
</g>
<g >
<title>core::num::{impl#11}::is_power_of_two (11 samples, 5.07%)</title><rect x="890.9" y="69" width="59.8" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="893.92" y="79.5" >core::..</text>
</g>
<g >
<title>long_mode_start (217 samples, 100.00%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >long_mode_start</text>
</g>
<g >
<title>linked_list_allocator::hole::HoleList::cursor (2 samples, 0.92%)</title><rect x="26.3" y="53" width="10.9" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="29.31" y="63.5" ></text>
</g>
<g >
<title>core::ptr::write&lt;jos::process::Process&gt; (3 samples, 1.38%)</title><rect x="42.6" y="229" width="16.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="45.63" y="239.5" ></text>
</g>
<g >
<title>compiler_builtins::mem::memcpy (3 samples, 1.38%)</title><rect x="42.6" y="197" width="16.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="45.63" y="207.5" ></text>
</g>
<g >
<title>core::iter::range::{impl#6}::next&lt;usize&gt; (13 samples, 5.99%)</title><rect x="1064.9" y="213" width="70.7" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1067.93" y="223.5" >core::i..</text>
</g>
<g >
<title>core::ptr::const_ptr::{impl#0}::is_aligned_to&lt;()&gt; (1 samples, 0.46%)</title><rect x="91.6" y="101" width="5.4" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="94.57" y="111.5" ></text>
</g>
<g >
<title>core::num::{impl#11}::unchecked_add::precondition_check (4 samples, 1.84%)</title><rect x="1113.9" y="149" width="21.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1116.87" y="159.5" >c..</text>
</g>
<g >
<title>core::str::validations::next_code_point&lt;core::slice::iter::Iter&lt;u8&gt;&gt; (2 samples, 0.92%)</title><rect x="75.3" y="165" width="10.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="78.25" y="175.5" ></text>
</g>
<g >
<title>core::fmt::write (166 samples, 76.50%)</title><rect x="58.9" y="229" width="902.7" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="61.94" y="239.5" >core::fmt::write</text>
</g>
<g >
<title>jos::process::Process::get_physical_address_for_virtual_address (1 samples, 0.46%)</title><rect x="1135.6" y="229" width="5.5" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1138.62" y="239.5" ></text>
</g>
<g >
<title>jos::process::PageTable::default (6 samples, 2.76%)</title><rect x="1157.4" y="229" width="32.6" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1160.37" y="239.5" >jo..</text>
</g>
<g >
<title>compiler_builtins::mem::impls::set_bytes (3 samples, 1.38%)</title><rect x="1173.7" y="181" width="16.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1176.69" y="191.5" ></text>
</g>
<g >
<title>all (217 samples, 100%)</title><rect x="10.0" y="325" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>core::fmt::Arguments::new_const&lt;1&gt; (2 samples, 0.92%)</title><rect x="880.0" y="69" width="10.9" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="883.05" y="79.5" ></text>
</g>
<g >
<title>jos::kprint::{impl#1}::write_str (163 samples, 75.12%)</title><rect x="75.3" y="213" width="886.3" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="78.25" y="223.5" >jos::kprint::{impl#1}::write_str</text>
</g>
<g >
<title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (22 samples, 10.14%)</title><rect x="836.5" y="101" width="119.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="839.54" y="111.5" >core::ub_check..</text>
</g>
<g >
<title>linked_list_allocator::hole::HoleList::allocate_first_fit (2 samples, 0.92%)</title><rect x="26.3" y="69" width="10.9" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="29.31" y="79.5" ></text>
</g>
<g >
<title>core::num::{impl#11}::unchecked_add (6 samples, 2.76%)</title><rect x="1103.0" y="165" width="32.6" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="1106.00" y="175.5" >co..</text>
</g>
<g >
<title>core::num::{impl#11}::is_power_of_two (1 samples, 0.46%)</title><rect x="91.6" y="85" width="5.4" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="94.57" y="95.5" ></text>
</g>
<g >
<title>core::ptr::write_volatile&lt;u16&gt; (2 samples, 0.92%)</title><rect x="86.1" y="165" width="10.9" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="89.13" y="175.5" ></text>
</g>
<g >
<title>jos::kprint::kprint_char (161 samples, 74.19%)</title><rect x="86.1" y="181" width="875.5" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="89.13" y="191.5" >jos::kprint::kprint_char</text>
</g>
<g >
<title>core::iter::range::{impl#43}::forward_unchecked (9 samples, 4.15%)</title><rect x="1086.7" y="181" width="48.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1089.68" y="191.5" >core..</text>
</g>
<g >
<title>core::ptr::read_volatile&lt;u16&gt; (33 samples, 15.21%)</title><rect x="548.3" y="149" width="179.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="551.34" y="159.5" >core::ptr::read_volatil..</text>
</g>
<g >
<title>linked_list_allocator::Heap::allocate_first_fit (2 samples, 0.92%)</title><rect x="26.3" y="85" width="10.9" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="29.31" y="95.5" ></text>
</g>
<g >
<title>core::ub_checks::maybe_is_aligned_and_not_null (21 samples, 9.68%)</title><rect x="613.6" y="117" width="114.2" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="616.59" y="127.5" >core::ub_check..</text>
</g>
<g >
<title>core::iter::range::{impl#5}::spec_next&lt;usize&gt; (13 samples, 5.99%)</title><rect x="1064.9" y="197" width="70.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1067.93" y="207.5" >core::i..</text>
</g>
<g >
<title>core::ptr::const_ptr::{impl#0}::is_aligned_to&lt;()&gt; (15 samples, 6.91%)</title><rect x="635.3" y="85" width="81.6" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="638.35" y="95.5" >core::ptr..</text>
</g>
<g >
<title>jos::kprint::kprint_char (3 samples, 1.38%)</title><rect x="58.9" y="133" width="16.4" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="61.94" y="143.5" ></text>
</g>
<g >
<title>compiler_builtins::mem::memcpy::memcpy (3 samples, 1.38%)</title><rect x="1141.1" y="229" width="16.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1144.06" y="239.5" ></text>
</g>
<g >
<title>jos::serial::is_transmit_empty (1 samples, 0.46%)</title><rect x="69.8" y="101" width="5.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="72.82" y="111.5" ></text>
</g>
<g >
<title>compiler_builtins::mem::impls::copy_forward (3 samples, 1.38%)</title><rect x="1141.1" y="197" width="16.3" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="1144.06" y="207.5" ></text>
</g>
<g >
<title>core::ptr::non_null::NonNull&lt;linked_list_allocator::hole::Hole&gt;::new&lt;linked_list_allocator::hole::Hole&gt; (2 samples, 0.92%)</title><rect x="26.3" y="37" width="10.9" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="29.31" y="47.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one&lt;alloc::alloc::Global&gt; (2 samples, 0.92%)</title><rect x="26.3" y="213" width="10.9" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="29.31" y="223.5" ></text>
</g>
<g >
<title>core::fmt::rt::Argument::fmt (3 samples, 1.38%)</title><rect x="58.9" y="213" width="16.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="61.94" y="223.5" ></text>
</g>
<g >
<title>core::num::{impl#11}::overflowing_add (1 samples, 0.46%)</title><rect x="1130.2" y="133" width="5.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1133.18" y="143.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::{impl#0}::is_null&lt;()&gt; (2 samples, 0.92%)</title><rect x="716.9" y="85" width="10.9" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="719.91" y="95.5" ></text>
</g>
<g >
<title>core::num::{impl#11}::count_ones (12 samples, 5.53%)</title><rect x="651.7" y="53" width="65.2" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="654.66" y="63.5" >core::n..</text>
</g>
<g >
<title>alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr&lt;alloc::alloc::Global, (1 samples, 0.46%)</title><rect x="37.2" y="197" width="5.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="40.19" y="207.5" ></text>
</g>
<g >
<title>core::ptr::write_volatile::precondition_check (31 samples, 14.29%)</title><rect x="787.6" y="133" width="168.6" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="790.60" y="143.5" >core::ptr::write_vola..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;jos::process::Process, (6 samples, 2.76%)</title><rect x="26.3" y="245" width="32.6" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="29.31" y="255.5" >al..</text>
</g>
<g >
<title>core::ptr::write_volatile&lt;u16&gt; (2 samples, 0.92%)</title><rect x="58.9" y="117" width="10.9" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="61.94" y="127.5" ></text>
</g>
<g >
<title>core::iter::range::{impl#41}::forward_unchecked (10 samples, 4.61%)</title><rect x="488.5" y="117" width="54.4" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="491.53" y="127.5" >core:..</text>
</g>
<g >
<title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (21 samples, 9.68%)</title><rect x="613.6" y="101" width="114.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="616.59" y="111.5" >core::ub_check..</text>
</g>
<g >
<title>core::ub_checks::maybe_is_aligned_and_not_null (22 samples, 10.14%)</title><rect x="836.5" y="117" width="119.7" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="839.54" y="127.5" >core::ub_check..</text>
</g>
<g >
<title>core::ptr::const_ptr::{impl#0}::is_null&lt;()&gt; (1 samples, 0.46%)</title><rect x="950.7" y="85" width="5.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="953.74" y="95.5" ></text>
</g>
<g >
<title>alloc::alloc::Global::alloc_impl (2 samples, 0.92%)</title><rect x="26.3" y="149" width="10.9" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="29.31" y="159.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::{impl#0}::is_aligned_to&lt;()&gt; (16 samples, 7.37%)</title><rect x="863.7" y="85" width="87.0" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="866.73" y="95.5" >core::ptr:..</text>
</g>
<g >
<title>core::ptr::const_ptr::{impl#0}::is_null::runtime (1 samples, 0.46%)</title><rect x="950.7" y="69" width="5.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="953.74" y="79.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1}::allocate (2 samples, 0.92%)</title><rect x="26.3" y="165" width="10.9" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="29.31" y="175.5" ></text>
</g>
<g >
<title>jos::kprint::kprint (3 samples, 1.38%)</title><rect x="58.9" y="149" width="16.4" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="61.94" y="159.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::{impl#0}::is_null::runtime (2 samples, 0.92%)</title><rect x="716.9" y="69" width="10.9" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="719.91" y="79.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized&lt;alloc::alloc::Global&gt; (2 samples, 0.92%)</title><rect x="26.3" y="197" width="10.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="29.31" y="207.5" ></text>
</g>
<g >
<title>core::iter::traits::collect::{impl#0}::into_iter&lt;core::ops::range::Range&lt;u64&gt;&gt; (1 samples, 0.46%)</title><rect x="542.9" y="149" width="5.4" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="545.90" y="159.5" ></text>
</g>
<g >
<title>core::num::{impl#11}::count_ones (11 samples, 5.07%)</title><rect x="890.9" y="53" width="59.8" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="893.92" y="63.5" >core::..</text>
</g>
<g >
<title>linked_list_allocator::{impl#4}::alloc (2 samples, 0.92%)</title><rect x="26.3" y="101" width="10.9" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="29.31" y="111.5" ></text>
</g>
<g >
<title>alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt; (2 samples, 0.92%)</title><rect x="26.3" y="181" width="10.9" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="29.31" y="191.5" ></text>
</g>
<g >
<title>core::iter::range::{impl#5}::spec_next&lt;u64&gt; (24 samples, 11.06%)</title><rect x="412.4" y="133" width="130.5" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="415.40" y="143.5" >core::iter::rang..</text>
</g>
<g >
<title>core::ub_checks::maybe_is_aligned_and_not_null (2 samples, 0.92%)</title><rect x="86.1" y="133" width="10.9" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="89.13" y="143.5" ></text>
</g>
<g >
<title>core::ptr::write_volatile&lt;u16&gt; (42 samples, 19.35%)</title><rect x="727.8" y="149" width="228.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="730.79" y="159.5" >core::ptr::write_volatile&lt;u16&gt;</text>
</g>
<g >
<title>alloc::alloc::alloc (2 samples, 0.92%)</title><rect x="26.3" y="133" width="10.9" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="29.31" y="143.5" ></text>
</g>
<g >
<title>jos::kprint::kprint (163 samples, 75.12%)</title><rect x="75.3" y="197" width="886.3" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="78.25" y="207.5" >jos::kprint::kprint</text>
</g>
<g >
<title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (2 samples, 0.92%)</title><rect x="86.1" y="117" width="10.9" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="89.13" y="127.5" ></text>
</g>
<g >
<title>compiler_builtins::mem::impls::copy_forward (3 samples, 1.38%)</title><rect x="42.6" y="181" width="16.3" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="45.63" y="191.5" ></text>
</g>
<g >
<title>jos::kprint::scroll_line (158 samples, 72.81%)</title><rect x="97.0" y="165" width="859.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="100.00" y="175.5" >jos::kprint::scroll_line</text>
</g>
<g >
<title>jos::mem::allocate_page_frame (32 samples, 14.75%)</title><rect x="961.6" y="229" width="174.0" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="964.61" y="239.5" >jos::mem::allocate_pag..</text>
</g>
<g >
<title>jos::process::Process::initialize (199 samples, 91.71%)</title><rect x="58.9" y="245" width="1082.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="61.94" y="255.5" >jos::process::Process::initialize</text>
</g>
</g>
</svg>
